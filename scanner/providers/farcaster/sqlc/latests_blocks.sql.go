// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: latests_blocks.sql

package queries

import (
	"context"
	"database/sql"
)

const existsLatestBlock = `-- name: ExistsLatestBlock :one
SELECT EXISTS (SELECT block_number FROM latest_blocks WHERE contract = ?)
`

func (q *Queries) ExistsLatestBlock(ctx context.Context, contract string) (bool, error) {
	row := q.db.QueryRowContext(ctx, existsLatestBlock, contract)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const insertLatestBlock = `-- name: InsertLatestBlock :execresult
INSERT INTO latest_blocks (contract, block_number) VALUES (?, ?)
`

type InsertLatestBlockParams struct {
	Contract    string
	BlockNumber int64
}

func (q *Queries) InsertLatestBlock(ctx context.Context, arg InsertLatestBlockParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertLatestBlock, arg.Contract, arg.BlockNumber)
}

const lastBlock = `-- name: LastBlock :one
SELECT block_number FROM latest_blocks WHERE contract = ?
`

func (q *Queries) LastBlock(ctx context.Context, contract string) (int64, error) {
	row := q.db.QueryRowContext(ctx, lastBlock, contract)
	var block_number int64
	err := row.Scan(&block_number)
	return block_number, err
}

const setLastBlock = `-- name: SetLastBlock :execresult
UPDATE latest_blocks SET block_number = ? WHERE contract = ?
`

type SetLastBlockParams struct {
	BlockNumber int64
	Contract    string
}

func (q *Queries) SetLastBlock(ctx context.Context, arg SetLastBlockParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, setLastBlock, arg.BlockNumber, arg.Contract)
}

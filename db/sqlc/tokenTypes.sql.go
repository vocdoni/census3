// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: tokenTypes.sql

package queries

import (
	"context"
	"database/sql"
)

const createTokenType = `-- name: CreateTokenType :execresult
INSERT INTO token_types (id, type_name) VALUES (?, ?)
`

type CreateTokenTypeParams struct {
	ID       uint64
	TypeName string
}

func (q *Queries) CreateTokenType(ctx context.Context, arg CreateTokenTypeParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createTokenType, arg.ID, arg.TypeName)
}

const listTokenTypes = `-- name: ListTokenTypes :many
SELECT id, type_name FROM token_types
ORDER BY id
`

func (q *Queries) ListTokenTypes(ctx context.Context) ([]TokenType, error) {
	rows, err := q.db.QueryContext(ctx, listTokenTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TokenType
	for rows.Next() {
		var i TokenType
		if err := rows.Scan(&i.ID, &i.TypeName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTokenType = `-- name: UpdateTokenType :execresult
UPDATE token_types SET type_name = ? WHERE id = ?
`

type UpdateTokenTypeParams struct {
	TypeName string
	ID       uint64
}

func (q *Queries) UpdateTokenType(ctx context.Context, arg UpdateTokenTypeParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateTokenType, arg.TypeName, arg.ID)
}

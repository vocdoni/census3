// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: blocks.sql

package queries

import (
	"context"
	"database/sql"

	"github.com/vocdoni/census3/db/annotations"
)

const blockByID = `-- name: BlockByID :one
SELECT id, timestamp, root_hash FROM blocks
WHERE id = ?
LIMIT 1
`

func (q *Queries) BlockByID(ctx context.Context, id uint64) (Block, error) {
	row := q.db.QueryRowContext(ctx, blockByID, id)
	var i Block
	err := row.Scan(&i.ID, &i.Timestamp, &i.RootHash)
	return i, err
}

const createBlock = `-- name: CreateBlock :execresult
INSERT INTO blocks (
    id,
    timestamp,
    root_hash
)
VALUES (
    ?, ?, ?
)
`

type CreateBlockParams struct {
	ID        uint64
	Timestamp string
	RootHash  annotations.Hash
}

func (q *Queries) CreateBlock(ctx context.Context, arg CreateBlockParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createBlock, arg.ID, arg.Timestamp, arg.RootHash)
}

const lastBlock = `-- name: LastBlock :one
SELECT id FROM blocks 
ORDER BY id DESC 
LIMIT 1
`

func (q *Queries) LastBlock(ctx context.Context) (uint64, error) {
	row := q.db.QueryRowContext(ctx, lastBlock)
	var id uint64
	err := row.Scan(&id)
	return id, err
}

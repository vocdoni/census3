// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: users.sql

package queries

import (
	"context"
	"database/sql"
)

const countUsers = `-- name: CountUsers :one
SELECT COUNT(*) FROM users
`

func (q *Queries) CountUsers(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countUsers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUser = `-- name: CreateUser :execresult
INSERT INTO users (fid) VALUES (?)
`

func (q *Queries) CreateUser(ctx context.Context, fid uint64) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser, fid)
}

const deleteUser = `-- name: DeleteUser :execresult
DELETE FROM users WHERE fid = ?
`

func (q *Queries) DeleteUser(ctx context.Context, fid uint64) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteUser, fid)
}

const getUserByFID = `-- name: GetUserByFID :one
SELECT fid FROM users WHERE fid = ?
`

func (q *Queries) GetUserByFID(ctx context.Context, fid uint64) (uint64, error) {
	row := q.db.QueryRowContext(ctx, getUserByFID, fid)
	err := row.Scan(&fid)
	return fid, err
}

const listUsers = `-- name: ListUsers :many
SELECT fid FROM users ORDER BY fid ASC
`

func (q *Queries) ListUsers(ctx context.Context) ([]uint64, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uint64
	for rows.Next() {
		var fid uint64
		if err := rows.Scan(&fid); err != nil {
			return nil, err
		}
		items = append(items, fid)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
